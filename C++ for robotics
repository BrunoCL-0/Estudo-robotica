    O documento em C++ eh em .cpp, depois de criado file e codigo posto deve executar:
1 - <g++ -std=c++11 name.cpp -o name_compiled>
2 - <./name_compiled>

exemplo de codigo/ estrutura basica em c++ :

#include "rosbot_control/rosbot_class.h"
#include <ros/ros.h>

using namespace std;

int main(int argc, char **argv) {
  ros::init(argc, argv, "rosbot_node");

  RosbotClass rosbot;
  rosbot.move();

  float x_1 = rosbot.get_position(1);
  float y_1 = rosbot.get_position(2);

  ROS_INFO_STREAM(x_1 << " and " << y_1);

  rosbot.move();

  float x_2 = rosbot.get_position(1);
  float y_2 = rosbot.get_position(2);

  ROS_INFO_STREAM(x_2 << " and " << y_2);

  return 0;
}

    *exemplo com array em c++*

#include "rosbot_control/rosbot_class.h"
#include <ros/ros.h>


int main(int argc, char **argv) {
  ros::init(argc, argv, "rosbot_node");

  RosbotClass rosbot;

  rosbot.move_forward(3);

  // Get readings
  float right = rosbot.get_laser(121);
  float left = rosbot.get_laser(431);
  
  // Define and assign array values
  float array_laser[] = {left,right};
  // Print array
  ROS_INFO_STREAM("The wall is at " << array_laser[0] << " meters to the left, and at " << array_laser[1] << " meters to the right from the robot ");
  
    
    
  return 0;
}

    *constructor em c++*

mesma logica vista em python , exemplo de codigo:
#include <iostream>
#include <string>
using namespace std;

class Hobbit {
    public:
    
       Hobbit(string a,float b,int c) {
           name = a;
           height = b;
           age = c;
       } //constructor
    
       string name;
       float height; //in meters
       int age;
    
       void get_name() {
           cout << "This hobbit's name is " << name << endl;
       }
       void convert_height_to_cm();
};

int main() {
    
    Hobbit first_hobbit("Frodo",1.15,28);
    
    Hobbit second_hobbit("Sam",1.26,31);
}

        *exemplo mais complexo q ele muda a direcao ao identificar algo*

#include "rosbot_control/rosbot_class.h"
#include <ros/ros.h>

#include <math.h>
#include <string>

using namespace std;

class RosbotMove {
public:
  RosbotClass rosbot;
  void get_out();
  float calc_distance(float x0, float y0, float x1, float y1);
};

void RosbotMove::get_out() {
  rosbot.move_forward(1);
  while (rosbot.get_laser(0) > 1.75) {
    ROS_INFO_STREAM("Laser frontal reading: " << rosbot.get_laser(0));
    rosbot.move_forward(1);
  }
  rosbot.turn("clockwise", 3);
  rosbot.move_forward(2);
  rosbot.turn("counterclockwise", 3);

  // Get initial position
  float x_0 = rosbot.get_position(1);
  float y_0 = rosbot.get_position(2);
  float x_1 = x_0;
  float y_1 = y_0;
  float dist = calc_distance(x_0, y_0, x_1, y_1);
  while (dist < 8.00) {
    // Update current position
    x_1 = rosbot.get_position(1);
    y_1 = rosbot.get_position(2);
    dist = calc_distance(x_0, y_0, x_1, y_1);
    ROS_INFO_STREAM("Distance travelled: " << dist);
    // Keep moving
    rosbot.move_forward(1);
  }
  rosbot.turn("clockwise", 3);
  rosbot.move_forward(5);
  ROS_INFO_STREAM("Success!!!");
}

    
// function to calculate distance
float RosbotMove::calc_distance(float x0, float y0, float x1, float y1)
{
    // calculating distance
    return sqrt(pow(x1 - x0, 2) + pow(y1 - y0, 2));
}

int main(int argc, char **argv) {
  ros::init(argc, argv, "Rosbot_move_node");
  RosbotMove rosbot_moves;
  rosbot_moves.get_out();
}
