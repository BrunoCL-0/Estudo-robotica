             * ROS2 BASICS IN 5 DAYS(PYTHON)*

Estrutura basica de comando: ros2 run <package_name> <executable_file> ou ros2 launch <package_name> <launch_file>

O Package eh onde ficara todos os programas, e ele fica dentro do workspaces, pra um projeto diferente devera ser usado outro workspace pra isolar o projeto
OBS: Sempre que for criar uma package, deve estar dentro do src dentro do workspace, ou seja ros2_ws/src por exemplo

Criando um Package - ros2 pkg create --build-type ament_python <package_name> --dependencies <package_dependency_1> <package_dependency_2> - package name é o nome que vc quer, package dependency é o package que seu package depende e ament_python 
indica que é um package em python

Colcon build - deve ser executado no workspace antes do src - Deve ser executado pois o workspace foi criado, compila tudo do src
Apos o colcon build deve-se usar source install/setup.bash para atualizar o ambiente do terminal e o sistema reconhecer os pacotes
Para projetos grandes usar colcon build --packages-select <package_name> - para não precisar baixar tudo do src - exemplo: colcon build --packages-select mars_rover_systems

ros2 pkg list - todos os packages listados, da pra filtrar com | grep <nome do package>

Exemplo de codigo do curso: 

#!/usr/bin/env python  - localiza a instalação python no sistema
import rclpy

def main(args=None):
    # initialize the ROS communication
    rclpy.init(args=args) - comando obrigatorio em ROS que configura o ambiente necessário para o script interagir com o ROS 
    # print a message to the terminal
    print("Mars rover 1 is alive...")
    # shutdown the ROS communication
    rclpy.shutdown() - finaliza a interação

if __name__ == '__main__':       - significa que o script está sendo executado diretamente, e não importado como um módulo em outro programa, tontando verdadeiro e o def main eh executado
    main() #call the main function

OBS IMPORTANTE: no curso, o setup.py foi modificado para exercutar o python file com ros2, nao sei se eh algo que sempre tera que ser feito ou não, assim, o codigo pode ser rodado com : ros2 run <name_of_the_package> <entry_point_name> ou seja
ros2 run mars_rover_systems heartbeat_executable

             * NODE BASICS*
exemplo:
#!/usr/bin/env python

import rclpy
import time
from rclpy.node import Node

def main(args=None):
    # initialize the ROS communication
    rclpy.init(args=args)
    
    # Create a node
    node = Node('mars_rover_1')              - Iniciando um ROS2 node com o nome mars_rover_1

    i = 0
    max_i = 50
    while i < max_i:
        i += 1
        ros_time_stamp = node.get_clock().now()   - pega o tempo de todo o sistema ROS2
        # print a message to the terminal
        node.get_logger().info(str(i)+":Mars rover 1 is alive..."+str(ros_time_stamp))   - o print do node é com esse log , ode.get_logger() é um método que retorna o logger associado ao nó e info() é um método desse logger 

        # Wait for 1 second
        time.sleep(1)   
    
    # shutdown the ROS communication
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()  # Call the main function

              *LAUNCH*
Basicamente serve para rodar mais de um node simultaneamente, se cria uma pasta lauch dentro da pasta que esta salvo sua area de trabalho(ex: ros2_ws/src/mars_rover_systems) e \dentro cria um arquivo .py que executara o lauch juntando os nodes
exemplo de codigo interno do .py do lauch : 

from launch import LaunchDescription
from launch_ros.actions import Node

def generate_launch_description():
    return LaunchDescription([
        Node(
            package='mars_rover_systems',
            executable='heartbeat_executable',
            output='screen'),
        Node(
            package='mars_rover_systems',
            executable='heartbeat_executable2',
            output='screen')
    ])

Explicação: 
package=The name of the package that contains the ROS2 program to execute.
executable=The name of the Python entry point defined in the setup.py.
output=The type of output channel for printing the program's output.
Observação: Deve-se editar tambem o setup.py para achar o .launch.py files

                    *TOPIC IN ROS*

ros2 topic list | grep cmd_vel - lista os topicos e filtra para cmd_vel
ros2 topic info /cmd_vel - diz o tipo de interface associada ao topico em questão, quantos nodes publicam dados nesse topico e número de nós ativos que leem dados desse tópico
ros2 interface show sensor_msgs/msg/LaserScan - mostra a estrutura do laserscan 
ros2 topic echo /laser_scan --field ranges - serve para mostrar (printar) apenas o ranges field, ao executar mostrara as distancias(ranges)

                *EXEMPLO PRATICO TOPIC (Mars Rover Camera)*

ros2 run rqt_image_view rqt_image_view /leo/camera/image_raw - output seria a camera do proprio robo, a visão dela
obs:utiliza o ROS 2 para executar o executável rqt_image_view, localizado no pacote de mesmo nome, que fornece uma 
interface gráfica para visualizar imagens publicadas em tópicos. O tópico /leo/camera/image_raw especifica o fluxo de dados de imagem bruta capturado pela câmera do robô "leo".

ros2 topic info /leo/camera/image_raw - diz o tipo de interface associada ao topico em questão, quantos nodes publicam dados nesse topico e número de nós ativos que leem dados desse tópico

ros2 interface show sensor_msgs/msg/Image - informa detalhes tecnicos gerados, nesse caso, das imagens fornecidas pela camera (esse sensor_msgs/msg/image(interface name)
foi o output gerado pelo topic info)

ros2 topic echo /leo/camera/image_raw --field data -  contém os dados brutos da imagem capturada(valores de pixels das imagens geradas por exemplo)

ros2 interface proto <package_name>/msg/<interface_name> - mostra um exemplo da interface que pode ser utilizada

        *PUBLICANDO MENSAGEM EM UM TOPICO*

ros2 topic pub <topic_name> <interface_name> <message>
Obs: Se o pub for uma execucao de giro por exemplo, pode-se imprimir o echo em outro terminal e ver a variação em tempo real, com o ros2 topic echo <topico>

Resumo: Ao saber o topic, usa topic info e pega a interface gerada e usa interface show pra ver os detalhes e interface foto pra ver exemplo de utilização, apos isso pra publicar algo
eh so usar o ros2 topic pub com o nome do topico, a interface(mesma usada no interface show) e a mensagem como o exemplo adquirido no interface photo

Importante: sempre que algo for publicado ou baixado temq atualizar o sistema com source /opt/ros/humble/setup.bash

     * MAIS SOBRE TOPIC * 
ros2 topic info /cmd_vel --verbose - lista um monte de coisa, os publishers e subscribers, tipo de topico e muitas outras coisas vistos nos codigos anteriores
Obs: no exemplo do curso, o ros2 topic echo causou no os subscribers e o ros2 topic pub causou o publishing

     * DEFINE A TOPIC*
.Apos criar o package e o launch, foi criado dentro do folder que terão os executaveis, nesse caso o  mars_rover_tasks , um file.py, porem, tem que transformar esse file em um executavel dentro 
do setup.py, segue exemplo abaixo:

file dentro do mars_rover_tasks:

import rclpy
from rclpy.node import Node

class ObstacleDetectorNode(Node):
    def __init__(self):
        super().__init__('obstacle_detector_node')
        self.get_logger().info('ObstacleDetectorNode has started.')
        # Aqui você pode adicionar código para terminar o nó
        rclpy.shutdown()

def main(args=None):
    rclpy.init(args=args)
    node = ObstacleDetectorNode()
    rclpy.spin(node)

if __name__ == '__main__':
    main()

obs: esse file tem um ros2 node chamado ObstacleDetectorNode

Após a criação desse file tem q ir no setup.py e adcicionar oque foi feito como executavel, ou seja ,segue exemplo abaixo de parte do codigo do setup.py:

entry_points={
        'console_scripts': [
            'subscriber_obstacle_detector_executable = mars_rover_tasks.subscriber_obstacle_detector:main',  - mars_rover_tasks é a pasta e o subscriber_obstacle_detector é o file - chama função main
        ],
    },


              *Subscriber Node*
no final do codigo tem QoSProfile(depth=10, reliability=ReliabilityPolicy.RELIABLE)) - garantindo qualidade ao codigo

quando executa ros2 topic info /laser_scan -v - vc tem o output do topic /laser_scan, nele mostra q o reliability é reliable, por isso coloca isso no qosprofile

           * Publisher Node*
exemplo:

class MoveRoverNode(Node):

    def __init__(self):
        # Here you have the class constructor
        # call super() in the constructor to initialize the Node object
        # the parameter you pass is the node name
        super().__init__('move_rover_node')
        # create the publisher object
        # in this case, the publisher will publish on /cmd_vel Topic with a queue size of 10 messages.
        # use the Twist module for /cmd_vel Topic
        self.publisher_ = self.create_publisher(Twist, '/cmd_vel', 10)

explicação:

We create a custom node named MoveRoverNode.
We use the create_publisher() method.
It has this following inputs:
topic message type: In this case Twist.
topic name: in this case /cmd_vel.
queue size for the publisher in ROS 2 : In this case its 10. This means that up to 10 messages can be buffered in the queue of the topic. If a subscriber can't keep up 
with the publishing rate, the 11th message will cause the first message to be dropped, and so on.

     * MAIS SOBRE SUBSCRIPTION E PUBLISHER*
Exemplo de subscription para entender:

self.subscription = self.create_subscription(
    Image,
    '/leo/camera/image_raw',
    self.image_callback,
    10)

Explicação:  

Aqui, você está criando um subscription para o tópico /leo/camera/image_raw, que transmite mensagens do tipo Image. Sempre que uma nova mensagem for publicada neste tópico, 
o método self.image_callback será chamado para processá-la(O subscription é usado para receber imagens da câmera).

            *CUSTOM INTERFACE*
Basicamente, para criar uma interface eh no estilo package igual antes porem n em python , exemplo:
ros2 pkg create --build-type ament_cmake custom_interfaces --dependencies rclcpp std_msgs geometry_msgs
Apos isso usou dentro do custom_interfaces: 
mkdir msg
touch msg/RoverEvents.msg

Observação: foi dado tanto codigo em .msg tanto .sml e .txt para execução

Apos tudo isso:
1-executa-se no terminal <ros2 interface show custom_interfaces/msg/RoverEvents> para ver se foi criado a interface
2-Importa igual uma biblioteca sua interface a ser usada no seu codigo python - <from custom_interfaces.msg import RoverEvents>


*Duvida: ficou meio confuso no curso em si se fica mexendo nos .txt, .msg e .xml diariamente, sei que o setup.py pra transformar em executavel usa mas so edita um pouco?ele gera automatico ? 
so devo me preocupar com a preocupação em .py do robo em si ?
(ENSINOU TOPIC E SERVICE)

            *CALLBACK FUNCTIONS*
EVENTS basicamente faz executar funções com certas condições, podendo ser informação de sensores, tempo e etc
exemplo:

self.create_timer(self.timer_period, self.timer_counter)
        self.create_timer(self.main_task_period, self.main_task)

Nesse caso, o self.timer_counter e o main_task são duas funções transformadas em callback que dependem da variavel de tempo que antecede a "virgula" e foi declarada antes no codigo
obs: callback parece ser imediato porem eh bom em ros aumentar o tempo de processamento de espera de determinadas ações

aparenemente o callback so pode ser usado um de cada vez, isso eh um problema pois por exemplo a camera de um robo mostraria sua imagem porem nao mudaria em tempo real

usa-se spin_once para executar um callback de cada vez e assim é útil para controle explícito

            *MULTITHREADED EXECUTORS*

Serve para executar mais de um callback simultaneamente, ele eh adicionado na função main, ou seja:
antes:
# REST OF THE CODE

def main(args=None):
    rclpy.init(args=args)
    plant_detector_node = PlantDetectorNode()
    rclpy.spin(plant_detector_node)
    plant_detector_node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()

depois:
from rclpy.executors import MultiThreadedExecutor

# REST OF THE CODE IS IDENTICAL


def main(args=None):
    rclpy.init(args=args)
    plant_detector_node = PlantDetectorNode()
    
    # Use MultiThreadedExecutor
    executor = MultiThreadedExecutor(num_threads=2)
    executor.add_node(plant_detector_node)
    
    try:
        executor.spin()
    finally:
        plant_detector_node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()

            *REENTRANTCALLBACKGROUP*

Basicamente os callbacks do mesmo grupo podem ser executados simultaneamente 
exemplo:

from rclpy.callback_groups import ReentrantCallbackGroup
...
self.reentrant_group_1 = ReentrantCallbackGroup()
...
self.subscription = self.create_subscription(
            Image,
            self._image_topic_name,
            self.listener_callback,
            10,
            callback_group=self.reentrant_group_1)

# Create the service for plant detection
self.srv = self.create_service(Trigger, 'detect_plants', self.detect_plants_callback, callback_group=self.reentrant_group_1)

            *MUTUALLYEXCLUSIVECALLBACKGROUP*
Basicamente somente um callback pode funcionar por vez e os demais sao bloqueados enquanto isso
exemplo(nesse caso usou calbbacks groups diferentes para poderem ser executados simultaneamente):

from rclpy.callback_groups import MutuallyExclusiveCallbackGroup
...
self.mutuallyexclusive_group_1 = MutuallyExclusiveCallbackGroup()
self.mutuallyexclusive_group_2 = MutuallyExclusiveCallbackGroup()
...
self.subscription = self.create_subscription(
            Image,
            self._image_topic_name,
            self.listener_callback,
            10,
            callback_group=self.mutuallyexclusive_group_1)

# Create the service for plant detection
self.srv = self.create_service(Trigger, 'detect_plants', self.detect_plants_callback, callback_group=self.mutuallyexclusive_group_2)

Mutualmente Exclusivo ou Reentrante?Depende das preferências e necessidades do seu nó.
Se suas funções de callback não compartilham recursos como entradas de sensores ou variáveis, use ReentrantCallbackGroups.
Se você deseja limitar o acesso a recursos compartilhados, MutuallyExclusiveCallbackGroups são a escolha ideal.

            *ACTION IN ROS2*

Basicamente eh chamado parecido com o service, pode cancelar um action enquanto esta sendo executado e enquanto action estiver sendo executado manda feedback pro cliente
OBS: O nó que fornece a funcionalidade Action deve conter um Action Server. O Action Server permite que outros nós chamem essa funcionalidade de Action.
O nó que chama a funcionalidade Action deve conter um Action Client. O Action Client permite que um nó se conecte ao Action Server de outro nó.

Apos executar um comando ros2 enquando ele esta sendo executados se usar ros2 action list aparece a execução e nome dela , apos isso
usar ros2 action info </rotate(nome da execução exemplo)> aparece na ultima linha esse formato - <pkg_name>/action/<interface_name> - se quiser por isso no interface show da certo

Chamando um action:
ros2 action send_goal <action_name> <action_type> <values>
exemplo pratico passo a passo:
1-ros2 run leo_description rotate_action_server.py
2-ros2 action list( terminal 2)
3-ros2 action info /rotate -t(rotate foi output do 2)
4-ros2 interface show leo_description/action/Rotate ( leo... output do 3)
5- ros2 action send_goal /rotate leo_description/action/Rotate "{rotation_time: 5.0}"  - output sera nos 2 terminais , se botar um <-f> no final do codigo ele lhe dara os feedbacks\

obs: if you check the leo_description package, you will see that it contains a directory called action. Inside that action directory, there is a file called Rotate.action.
That is the file specifying the type of message the action uses.

obs:The following is a self-explanatory example of how to implement an action client that calls the rotate Action Server and makes it rotate for five seconds.

obs: A mensagem de um action eh dividido em 3 partes: goal,result e feedback , exemplo: ROTATION_TIME , SUCCESS E ELAPSED_TIME respectivamente

exemplo de codigo action.py: 

import rclpy
from rclpy.action import ActionClient
from rclpy.node import Node
from leo_description.action import Rotate


class MyActionClient(Node):

    def __init__(self):
        super().__init__('my_action_client')
        self._action_client = ActionClient(self, Rotate, 'rotate')

    def send_goal(self, seconds):
        goal_msg = Rotate.Goal()
        goal_msg.rotation_time = seconds

        self._action_client.wait_for_server()
        self._send_goal_future = self._action_client.send_goal_async(
            goal_msg, feedback_callback=self.feedback_callback)

        self._send_goal_future.add_done_callback(self.goal_response_callback)

    def goal_response_callback(self, future):
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().info('Goal rejected :(')
            return

        self.get_logger().info('Goal accepted :)')

        self._get_result_future = goal_handle.get_result_async()
        self._get_result_future.add_done_callback(self.get_result_callback)

    def get_result_callback(self, future):
        result = future.result().result
        self.get_logger().info('Result: {0}'.format(result.success))
        rclpy.shutdown()

    def feedback_callback(self, feedback_msg):
        feedback = feedback_msg.feedback
        self.get_logger().info(
           'Received feedback: {0}'.format(feedback.elapsed_time))


def main(args=None):
    rclpy.init(args=args)

    action_client = MyActionClient()

    action_client.send_goal(5.0)

    rclpy.spin(action_client)


if __name__ == '__main__':
    main()

explicação do codigo: 

Construtor -
The ROS2 node that contains the Action Client: in this case, self.
The type of the Action: Rotate (related to the leo_description interface of type Action).
The Action name: rotate.

def send_goal:
Start by creating a Goal() object of the Rotate action type. Then, access the rotation_time variable of the Action goal and assign it the value of seconds (which is five in this example).
And send the goal to the Server using the send_goal_async method
obs:This send_goal_async() method returns a future to a goal handle. This future goal handle will be completed when the Server has processed the goal. (This means it has been accepted or 
rejected by the Server). So, you must assign a callback method to be triggered when the future is completed (the goal has been accepted or rejected). In this case, 
\this method is self.goal_response_callback:






